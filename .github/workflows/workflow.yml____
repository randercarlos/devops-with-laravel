name: Tests

on:
  push:
    branches: [ "main" ]

env:
  API_IMAGE: rcarlos/devops-with-laravel-api:${{ github.sha }}
  SCHEDULER_IMAGE: rcarlos/devops-with-laravel-scheduler:${{ github.sha }}
  WORKER_IMAGE: rcarlos/devops-with-laravel-worker:${{ github.sha }}
  NGINX_IMAGE: rcarlos/devops-with-laravel-nginx:${{ github.sha }}
  PROXY_IMAGE: rcarlos/devops-with-laravel-proxy:${{ github.sha }}
  MYSQL_IMAGE: rcarlos/devops-with-laravel-database:${{ github.sha }}
  FRONTEND_IMAGE: rcarlos/devops-with-laravel-frontend:${{ github.sha }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  analyze-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build API Image
        run: docker build -t $API_IMAGE --target=api -f ./api/Dockerfile .
      - name: Run phpstan
        run: docker run --rm -t $API_IMAGE ./vendor/bin/phpstan analyze --memory-limit=1G
      - name: Run phpinsights
        run: docker run --rm -t $API_IMAGE php artisan insights --no-interaction --min-quality=90 --min-complexity=90 --min-architecture=90 --min-style=90 --ansi --format=github-action

  test-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build API Image
        run: docker build -t $API_IMAGE --target=api -f ./api/Dockerfile .
      - name: Build MySQL Image
        run: docker build -t $MYSQL_IMAGE --build-arg password=${{ secrets.DB_PASSWORD }} -f ./Dockerfile.mysql .
      - name: Run tests
        run: |
          docker run --rm -t $API_IMAGE php artisan test

  build-backend-images:
    needs: [ analyze-code, test-code ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build images
        run: |
          docker build -t $API_IMAGE --target=api -f ./api/Dockerfile .
          docker build -t $SCHEDULER_IMAGE --target=scheduler -f ./api/Dockerfile .
          docker build -t $WORKER_IMAGE --target=worker -f ./api/Dockerfile .
      - name: Push images
        run: |
          docker push $API_IMAGE
          docker push $SCHEDULER_IMAGE
          docker push $WORKER_IMAGE

  build-database-image:
    needs: [ analyze-code, test-code ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build MySQL image
        run: docker build -t $MYSQL_IMAGE --build-arg password=${{ secrets.DB_PASSWORD }} -f ./Dockerfile.mysql .
      - name: Push Mysql image
        run: docker push $MYSQL_IMAGE

  build-nginx-image:
    needs: [ analyze-code, test-code ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build nginx image
        run: |
          docker build -t $NGINX_IMAGE -f ./Dockerfile.nginx .
          docker push $NGINX_IMAGE

  build-proxy-image:
    needs: [ analyze-code, test-code ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build nginx image
        run: |
          docker build -t $PROXY_IMAGE -f ./Dockerfile.proxy .
          docker push $PROXY_IMAGE

  build-frontend-image:
    needs: [ analyze-code, test-code ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build frontend image
        run: |
          docker build -t $FRONTEND_IMAGE --target=prod -f ./frontend/Dockerfile .
          docker push $FRONTEND_IMAGE

  deploy-prod:
    needs: [ analyze-code, test-code, build-backend-images, build-database-image, build-frontend-image, build-nginx-image, build-proxy-image ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" >> ./id_rsa
          chmod 600 id_rsa
      - name: Deploy app
        run: |
          scp -v -C -o StrictHostKeyChecking=no -i ./id_rsa ./deployment/bin/deploy.sh ${{ secrets.SSH_CONNECTION_PROD }}:/home/apprunner/deploy.sh
          scp -v -C -o StrictHostKeyChecking=no -i ./id_rsa ./docker-compose.prod.yml ${{ secrets.SSH_CONNECTION_PROD }}:/usr/src/docker-compose.prod.yml
          scp -v -C -o StrictHostKeyChecking=no -i ./id_rsa ./.env.prod.template ${{ secrets.SSH_CONNECTION_PROD }}:/usr/src/.env
          ssh -v -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.SSH_CONNECTION_PROD }} "chmod +x /home/apprunner/deploy.sh"
          ssh -v -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.SSH_CONNECTION_PROD }} "
            sed -i "/IMAGE_TAG/c\IMAGE_TAG=${{ github.sha }}" /usr/src/.env
            sed -i "/COMPOSE_PROJECT_NAME/c\COMPOSE_PROJECT_NAME=devops-with-laravel" /usr/src/.env

            sed -i "/DOCKERHUB_USERNAME/c\DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" /usr/src/.env
            sed -i "/DOCKERHUB_PASSWORD/c\DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}" /usr/src/.env

            sed -i "/DB_PASSWORD/c\DB_PASSWORD=${{ secrets.DB_PASSWORD }}" /usr/src/.env
            sed -i "/AWS_ACCESS_KEY_ID/c\AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" /usr/src/.env
            sed -i "/AWS_SECRET_ACCESS_KEY/c\AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" /usr/src/.env
            sed -i "/AWS_DEFAULT_REGION/c\AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" /usr/src/.env
            sed -i "/APP_KEY/c\APP_KEY=${{ secrets.APP_KEY }}" /usr/src/.env"
          ssh -v -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.SSH_CONNECTION_PROD }} "/home/apprunner/deploy.sh"

#      - name: Configure AWS
#        run: |
#          echo "${{ secrets.SSH_KEY }}" >> ./id_rsa
#          chmod 600 id_rsa
