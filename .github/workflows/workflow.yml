name: Tests

on:
  push:
    branches: [ "main" ]

env:
  API_IMAGE: rcarlos/devops-with-laravel-api:${{ github.sha }}
  SCHEDULER_IMAGE: rcarlos/devops-with-laravel-scheduler:${{ github.sha }}
  WORKER_IMAGE: rcarlos/devops-with-laravel-worker:${{ github.sha }}
  NGINX_IMAGE: rcarlos/devops-with-laravel-nginx:${{ github.sha }}
  PROXY_IMAGE: rcarlos/devops-with-laravel-proxy:${{ github.sha }}
  MYSQL_IMAGE: rcarlos/devops-with-laravel-database:${{ github.sha }}
  FRONTEND_IMAGE: rcarlos/devops-with-laravel-frontend:${{ github.sha }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  build-backend-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build images
        run: |
          docker build -t $API_IMAGE --target=api -f ./api/Dockerfile .
          docker build -t $SCHEDULER_IMAGE --target=scheduler -f ./api/Dockerfile .
          docker build -t $WORKER_IMAGE --target=worker -f ./api/Dockerfile .
      - name: Push images
        run: |
          docker push $API_IMAGE
          docker push $SCHEDULER_IMAGE
          docker push $WORKER_IMAGE

  build-mysql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build MySQL image
        run: docker build -t $MYSQL_IMAGE --build-arg password=${{ secrets.DB_PASSWORD }} -f ./Dockerfile.mysql .
      - name: Push Mysql image
        run: docker push $MYSQL_IMAGE

  analyze:
    needs: [build-backend-images, build-mysql]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Pull API image
        run: docker pull $API_IMAGE
      - name: Pull MySQL image
        run: docker pull $MYSQL_IMAGE
      - name: Run phpstan
        run: docker run --rm -t $API_IMAGE ./vendor/bin/phpstan analyze --memory-limit=1G
      - name: Run phpinsights
        run: docker run --rm -t $API_IMAGE php artisan insights --no-interaction --min-quality=90 --min-complexity=90 --min-architecture=90 --min-style=90 --ansi --format=github-action

  test:
    needs: [ build-backend-images, build-mysql ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Pull API image
        run: docker pull $API_IMAGE
      - name: Pull MySQL image
        run: docker pull $MYSQL_IMAGE
      - name: Run tests
        run: |
          docker-compose -f docker-compose.ci.yml up -d
          docker-compose -f docker-compose.ci.yml exec -T api php artisan test

  remove-images:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - uses: actions/checkout@v3
      - name: Remove images
        run: |
          chmod +x ./deployment/bin/remove-image.sh 
          ./deployment/bin/remove-image.sh rcarlos/devops-with-laravel-api ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}
          ./deployment/bin/remove-image.sh rcarlos/devops-with-laravel-database ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}
          ./deployment/bin/remove-image.sh rcarlos/devops-with-laravel-worker ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}
          ./deployment/bin/remove-image.sh rcarlos/devops-with-laravel-scheduler ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_PASSWORD }}

  build-nginx:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build nginx image
        run: |
          docker build -t $NGINX_IMAGE -f ./Dockerfile.nginx .
          docker push $NGINX_IMAGE

  build-proxy:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build nginx image
        run: |
          docker build -t $PROXY_IMAGE -f ./Dockerfile.proxy .
          docker push $PROXY_IMAGE

  build-frontend:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build frontend image
        run: |
          docker build -t $FRONTEND_IMAGE --target=prod -f ./frontend/Dockerfile .
          docker push $FRONTEND_IMAGE

  deploy-prod:
    needs: [ build-frontend, build-nginx, build-proxy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" >> ./id_rsa
          chmod 600 id_rsa
      - name: Deploy app
        run: |
          # Transfer files
          scp -v -C -o StrictHostKeyChecking=no -i ./id_rsa \
          ./deployment/bin/deploy.sh \
          ./docker-compose.prod.yml \
          ./.env.prod.template \
          ${{ secrets.SSH_CONNECTION_PROD }}:/usr/src/
          
          # give run permission to deploy.sh
          ssh -v -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.SSH_CONNECTION_PROD }} "chmod +x /usr/src/deploy.sh"
          
          # Execute commands remotely
          ssh -v -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.SSH_CONNECTION_PROD }} '
            # Modify the .env file with all required changes in one sed command
            sed -i.bak -e "s/IMAGE_TAG=.*/IMAGE_TAG=${{ github.sha }}/" \
            -e "s/COMPOSE_PROJECT_NAME=.*/COMPOSE_PROJECT_NAME=devops-with-laravel/" \
            -e "s/DOCKERHUB_USERNAME=.*/DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}/" \
            -e "s/DOCKERHUB_PASSWORD=.*/DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}/" \
            -e "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" \
            -e "s/AWS_ACCESS_KEY_ID=.*/AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}/" \
            -e "s/AWS_SECRET_ACCESS_KEY=.*/AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}/" \
            -e "s/APP_KEY=.*/APP_KEY=${{ secrets.APP_KEY }}/" /usr/src/.env'
          
          # run deploy.sh
          ssh -v -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.SSH_CONNECTION_PROD }} "/usr/src/deploy.sh"
